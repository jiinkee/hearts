
==================== FINAL INTERFACE ====================
2019-10-10 02:42:11.8211441 UTC

interface main:SmartLeadPlayer 8064
  interface hash: 6686d79102c1bb771573391e1f1495a7
  ABI hash: 636aaba4fa8abc9c5312866675fbac37
  export-list hash: d75f460c35664f90b1a0d0e6166d13cf
  orphan hash: a59c9c46fb290af7dfab1ce6f9b18c16
  flag hash: 87f038a240ba1c5a2762df5516ceda23
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  SmartLeadPlayer.makeBid
  SmartLeadPlayer.playCard
module dependencies: MemoryParser
package dependencies: array-0.5.3.0 base-4.12.0.0 deepseq-1.4.4.0
                      ghc-prim-0.5.3 hearts-0.1.0.0 integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:Control.Applicative 37ad1ecb7adc211899b18378548196ee
import  -/  base-4.12.0.0:Data.Foldable 6673f41a7644ecd4dda455d741d47ef8
import  -/  base-4.12.0.0:Data.Functor 7be8e53dff1d6c612350c8ff6725f331
import  -/  base-4.12.0.0:Data.List ccb3c44b4e7df281b8508bfc1f389d8d
import  -/  base-4.12.0.0:Data.Maybe 385d0eb722c0cb2347caf44c1967afe7
import  -/  base-4.12.0.0:Data.OldList cd51cf46346202f55e4ecde7f0f7b58e
import  -/  base-4.12.0.0:Data.Tuple ddbd97abaf9b62e84e82a5bae338d270
import  -/  base-4.12.0.0:GHC.Base 954f4c258d193fab7048a63bfeb56dcf
import  -/  base-4.12.0.0:GHC.Err 3a680f55541fe399f95f794018fc3593
import  -/  base-4.12.0.0:GHC.List 63f1dc438c14c2ecfce50219fbb7ff35
import  -/  base-4.12.0.0:Prelude aea9afd24db8aed3563d7d850ea453c0
import  -/  ghc-prim-0.5.3:GHC.Classes 6002495dc43e58d28c87e5e5e058752a
import  -/  hearts-0.1.0.0:Cards d697d07d040dcb0fea10f2214ac7155e
import  -/  hearts-0.1.0.0:Hearts.Types a3e1c55fd9fb4edfd15f0d68a5a3797b
import  -/  MemoryParser 0798abcb6f9abd458a8bc16194a9f7a8
  exports: 5073857b64741d4a1b5870eb7c2a41d2
  getBrokenHeart d73a3b350f75519aa1fb7027f39b81d7
  getPreviousRound 344de3d8c8297f9f70d8573f193b1864
  getUsedCards 911c1790fee78b76e6a5fe74cc9a834d
  getUsedClubs edc74ed1fe37b06ca20259702ae47511
  getUsedDiamonds 9c2a5444ddf5a0e34a4c12e65e7ead88
  getUsedHearts a9802bc72157f140f2101b267bbde8c1
  getUsedSpades 029d72f3d2bffbfdedd52c2caedf5f62
  updateRunOutSuit 7363769ca01e9322f25869cca437a471
  updateUsedCards 923c337e070c492546fbd12909792ead
  whoRunOut 240ff4721b1b43cecd12a42c64900691
4ac05deb57bcf38be66c918ed8233ff0
  $sminimum :: [Cards.Card] -> Cards.Card
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [Cards.Card]) ->
                 case w of wild {
                   [] -> SmartLeadPlayer.$sminimum1
                   : ipv ipv1
                   -> case ipv of ww { Cards.Card ww1 ww2 ->
                      case SmartLeadPlayer.$wgo ipv1 ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                      Cards.Card ww4 ww5 } } }) -}
b768a15d9c7d8b819d137154c866073a
  $sminimum1 :: Cards.Card
  {- Strictness: x -}
7e11250abd1f1dd668ebb29905496f22
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   SmartLeadPlayer.$trModule3
                   SmartLeadPlayer.$trModule1) -}
8512bf08fcdfc85c9ee10297aa936164
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SmartLeadPlayer.$trModule2) -}
1751eb5257fe8ba9a34149daa68bb09c
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SmartLeadPlayer"#) -}
0946fb3fdbf18a1a9ea0be08ced3cea9
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SmartLeadPlayer.$trModule4) -}
90661b9d66c139d74da8a3ee2e9c61d7
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
973e4614fff6182d0f0afae29e0402ae
  $wgo ::
    [Cards.Card]
    -> Cards.Suit -> Cards.Rank -> (# Cards.Suit, Cards.Rank #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U>,
     Inline: [2] -}
e998fc52831e30865bfa30370ee6b412
  $wplayCard ::
    [Cards.Card]
    -> [(Cards.Card, Hearts.Types.PlayerId)]
    -> GHC.Maybe.Maybe
         ([(Cards.Card, Hearts.Types.PlayerId)], GHC.Base.String)
    -> (# Cards.Card, GHC.Base.String #)
  {- Arity: 3, Strictness: <L,U><S,U><S,U>, Inline: [2] -}
c9285221ad36333a4a2a84c10cbb852f
  makeBid :: Hearts.Types.BidFunc
  {- Strictness: x -}
e2e538a3d939a4dc33cd78bbf2deb5a3
  playCard :: Hearts.Types.PlayFunc
  {- Arity: 4, Strictness: <L,A><L,U><S,U><S,U>m, Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Hearts.Types.PlayerId)
                   (w1 :: [Cards.Card])
                   (w2 :: [(Cards.Card, Hearts.Types.PlayerId)])
                   (w3 :: GHC.Maybe.Maybe
                            ([(Cards.Card, Hearts.Types.PlayerId)], GHC.Base.String)) ->
                 case SmartLeadPlayer.$wplayCard w1 w2 w3 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
"SPEC/SmartLeadPlayer minimum @ Card" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                  Cards.Card)
  GHC.List.minimum @ Cards.Card $dOrd = SmartLeadPlayer.$sminimum
trusted: trustworthy
require own pkg trusted: True
module header:
  Nothing
declaration docs:
arg docs:

