
==================== FINAL INTERFACE ====================
2019-10-24 04:26:55.0550811 UTC

interface main:IntelligentPlayer 8064
  interface hash: 37ab3ce59877c3c39a8ba637c89bf99d
  ABI hash: dc26b618f32a0837b5f9a6e545ee8f77
  export-list hash: 3a563bfad301d867eeb7eb6d6c54597b
  orphan hash: 18d34d3f0b7e8f8d7d421dfcde7d60f6
  flag hash: 87f038a240ba1c5a2762df5516ceda23
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  IntelligentPlayer.makeBid
  IntelligentPlayer.playCard
module dependencies:
package dependencies: array-0.5.3.0 base-4.12.0.0 deepseq-1.4.4.0
                      ghc-prim-0.5.3 hearts-0.1.0.0 integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:Control.Applicative 37ad1ecb7adc211899b18378548196ee
import  -/  base-4.12.0.0:Data.Foldable 6673f41a7644ecd4dda455d741d47ef8
import  -/  base-4.12.0.0:Data.Functor 7be8e53dff1d6c612350c8ff6725f331
import  -/  base-4.12.0.0:Data.List ccb3c44b4e7df281b8508bfc1f389d8d
import  -/  base-4.12.0.0:Data.Maybe 385d0eb722c0cb2347caf44c1967afe7
import  -/  base-4.12.0.0:Data.OldList cd51cf46346202f55e4ecde7f0f7b58e
import  -/  base-4.12.0.0:Data.Tuple ddbd97abaf9b62e84e82a5bae338d270
import  -/  base-4.12.0.0:GHC.Base 954f4c258d193fab7048a63bfeb56dcf
import  -/  base-4.12.0.0:GHC.Err 3a680f55541fe399f95f794018fc3593
import  -/  base-4.12.0.0:GHC.List 63f1dc438c14c2ecfce50219fbb7ff35
import  -/  base-4.12.0.0:GHC.Num 009f4fca9200daff9e3ffbe2d7676a2f
import  -/  base-4.12.0.0:Prelude aea9afd24db8aed3563d7d850ea453c0
import  -/  ghc-prim-0.5.3:GHC.Classes 6002495dc43e58d28c87e5e5e058752a
import  -/  hearts-0.1.0.0:Cards d697d07d040dcb0fea10f2214ac7155e
import  -/  hearts-0.1.0.0:Hearts.Types a3e1c55fd9fb4edfd15f0d68a5a3797b
f638d1092d012e264e04bfdba17eb420
  $smaximum :: [Cards.Card] -> Cards.Card
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [Cards.Card]) ->
                 case w of wild {
                   [] -> IntelligentPlayer.$smaximum1
                   : ipv ipv1
                   -> case ipv of ww { Cards.Card ww1 ww2 ->
                      case IntelligentPlayer.$wgo ipv1 ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                      Cards.Card ww4 ww5 } } }) -}
de4cd426f19c5f90915e84eea36ab532
  $smaximum1 :: Cards.Card
  {- Strictness: x -}
6b4c9e7e08cdbcf2adf4919a3f58f149
  $smaximum3 :: Cards.Rank
  {- Strictness: x -}
603fcf7b1028829cf4fbd98e506ff388
  $sminimum :: [Cards.Card] -> Cards.Card
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [Cards.Card]) ->
                 case w of wild {
                   [] -> IntelligentPlayer.$sminimum1
                   : ipv ipv1
                   -> case ipv of ww { Cards.Card ww1 ww2 ->
                      case IntelligentPlayer.$wgo1 ipv1 ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                      Cards.Card ww4 ww5 } } }) -}
f1f17d2fe8305ee79d466f5a3c6bb7c3
  $sminimum1 :: Cards.Card
  {- Strictness: x -}
8d7bbe615a195313c51f6f440ad4ec3e
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   IntelligentPlayer.$trModule3
                   IntelligentPlayer.$trModule1) -}
5ef2a84dc9205df37a22b869530ebc5c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS IntelligentPlayer.$trModule2) -}
ac45992e47b4f4d279b8174c59960602
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IntelligentPlayer"#) -}
0f83e7d102c4dacdff23ff58453e80f6
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS IntelligentPlayer.$trModule4) -}
ea4174072b5c547d5ae7c196c179d2a1
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
85ceb2ef03a81096001960433f6dc5fe
  $wgo ::
    [Cards.Card]
    -> Cards.Suit -> Cards.Rank -> (# Cards.Suit, Cards.Rank #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U>,
     Inline: [2] -}
6af4aa6368effae5151649b888b93a82
  $wgo1 ::
    [Cards.Card]
    -> Cards.Suit -> Cards.Rank -> (# Cards.Suit, Cards.Rank #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U>,
     Inline: [2] -}
2354e413587c2d8c4b50ea39de4d19b7
  $wplayCard ::
    [Cards.Card]
    -> [(Cards.Card, Hearts.Types.PlayerId)]
    -> GHC.Maybe.Maybe
         ([(Cards.Card, Hearts.Types.PlayerId)], GHC.Base.String)
    -> (# Cards.Card, GHC.Base.String #)
  {- Arity: 3, Strictness: <L,U><S,U><S,U>, Inline: [2] -}
17509859a5d38ef62c74291bc874dbd9
  makeBid :: Hearts.Types.BidFunc
  {- Strictness: x -}
c23f4c551d9c819834b9cec7a8dafb06
  playCard :: Hearts.Types.PlayFunc
  {- Arity: 4, Strictness: <L,A><L,U><S,U><S,U>m, Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Hearts.Types.PlayerId)
                   (w1 :: [Cards.Card])
                   (w2 :: [(Cards.Card, Hearts.Types.PlayerId)])
                   (w3 :: GHC.Maybe.Maybe
                            ([(Cards.Card, Hearts.Types.PlayerId)], GHC.Base.String)) ->
                 case IntelligentPlayer.$wplayCard w1 w2 w3 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
"SPEC/IntelligentPlayer maximum @ Card" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                    Cards.Card)
  GHC.List.maximum @ Cards.Card $dOrd = IntelligentPlayer.$smaximum
"SPEC/IntelligentPlayer minimum @ Card" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                    Cards.Card)
  GHC.List.minimum @ Cards.Card $dOrd = IntelligentPlayer.$sminimum
trusted: trustworthy
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

