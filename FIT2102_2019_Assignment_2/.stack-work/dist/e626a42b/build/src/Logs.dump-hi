
==================== FINAL INTERFACE ====================
2019-10-04 09:13:47.088233 UTC

interface hearts-0.1.0.0-HFI8OJwlE7V2tI6leOF0kf:Logs [orphan module] 8064
  interface hash: aeef252981f7976406a1d27fe0fd6596
  ABI hash: 7b7bbc6b95446a7cfe584081b6832c09
  export-list hash: 20fc62e3ecd8b5476195a7fc5992b744
  orphan hash: ab3b6760c540dff2da73c239442c24bb
  flag hash: f2210fe39acaf2041f023d3ae9a54928
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Logs.clearAllLogs
  Logs.clearLog
  Logs.writeGame
module dependencies: Cards Hearts.Types
package dependencies: Only-0.1 Win32-2.6.1.0 array-0.5.3.0
                      attoparsec-0.13.2.2 base-4.12.0.0 binary-0.8.6.0
                      bytestring-0.10.8.2 cassava-0.5.1.0 containers-0.6.0.1
                      deepseq-1.4.4.0 directory-1.3.3.0 filepath-1.4.2.1 ghc-prim-0.5.3
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.3
                      primitive-0.6.4.0 scientific-0.3.6.2 text-1.2.3.1 text-short-0.1.2
                      time-1.8.0.2 transformers-0.5.6.2 unordered-containers-0.2.9.0
                      vector-0.12.0.2
orphans: vector-0.12.0.2:Data.Vector.Unboxed
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: Only-0.1:Data.Tuple.Only
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         text-short-0.1.2:Data.Text.Short.Internal
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  base-4.12.0.0:Data.Foldable 6673f41a7644ecd4dda455d741d47ef8
import  -/  base-4.12.0.0:Data.List ccb3c44b4e7df281b8508bfc1f389d8d
import  -/  base-4.12.0.0:Data.OldList cd51cf46346202f55e4ecde7f0f7b58e
import  -/  base-4.12.0.0:GHC.Base 954f4c258d193fab7048a63bfeb56dcf
import  -/  base-4.12.0.0:GHC.Enum b48c8c8d2681aecfb61368272d07740d
import  -/  base-4.12.0.0:GHC.IO 83f83859bdb7dbbe970dd7fd763b40dc
import  -/  base-4.12.0.0:GHC.List 63f1dc438c14c2ecfce50219fbb7ff35
import  -/  base-4.12.0.0:GHC.Num 009f4fca9200daff9e3ffbe2d7676a2f
import  -/  base-4.12.0.0:GHC.Show 48dce8b8129312101170e57c24f3ecbd
import  -/  base-4.12.0.0:Prelude aea9afd24db8aed3563d7d850ea453c0
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy 025d4bf518698eaace0a5820679c5754
import  -/  cassava-0.5.1.0:Data.Csv f93aa3539d4453a190e2838d3a9807bf
import  -/  cassava-0.5.1.0:Data.Csv.Conversion 6c73d798a7d39e76e0855077124e640e
import  -/  cassava-0.5.1.0:Data.Csv.Encoding 808712aebb94a92b3335b504587b8570
import  -/  directory-1.3.3.0:System.Directory c2a127d66198c0f9be4768b70506ef0c
import  -/  filepath-1.4.2.1:System.FilePath 8800b2b239b9af9589fa04db6389de43
import  -/  filepath-1.4.2.1:System.FilePath.Windows e71d4d4ad9a229e138c6bed127395c3d
import  -/  ghc-prim-0.5.3:GHC.Classes 6002495dc43e58d28c87e5e5e058752a
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  Cards d697d07d040dcb0fea10f2214ac7155e
  exports: cfa430ec5fd63670b639b890916903f0
  Card cfb951caaa2f9a5905caef5fecc70aec
  Card 19277cfa8f5abc322f41b6b66787ef36
  Jack 7c956153ff40ba1b89477db1aebccea7
  Suit 14641445c9cecb6d279c33641c171385
import  -/  Hearts.Types a3e1c55fd9fb4edfd15f0d68a5a3797b
  exports: e63188d47c1b60e5775afdff00704e87
  $sel:playerId:HandScore 0889a857354aae931c053f90e44d7865
  $sel:playerId:Player e2943f98cb190d157501cefcaadd0ae0
  $sel:score:HandScore 0889a857354aae931c053f90e44d7865
  GameResult f8229a7bafbcee75b47dffe2e5a8d34c
  GameResult 1fe23a22d690499602a6750ab300604e
  HandResult 84ef3089fb4cc95cb3619d0623da76e6
  HandResult d7eb94a86e3309cfbf5295fa7465eb9c
  HandScore c4dd46ab7497006a4a5a9aefc7f7afdc
  HandScore 0889a857354aae931c053f90e44d7865
  Player f29520b7638206ecedb9403ebc176da9
  Player e2943f98cb190d157501cefcaadd0ae0
  PlayerId 3f460c200f553f1b990ca9337c7b043c
  Trick f6df6858af30dac3ac78f2b378198d7e
  first 3ccdd6ff42ce8f029061b89ab1a170a7
  second 3759752def11a59e0e538bfc9fafff6d
import  -/  time-1.8.0.2:Data.Time.Clock.Internal.SystemTime 299f3d2c195ac18ff3d5132c78a7f118
import  -/  time-1.8.0.2:Data.Time.Clock.System ea4961b0b545033bb7da06868018ba11
import  -/  vector-0.12.0.2:Data.Vector 3a5a1e611b885a022d5a565cead34252
79bec63e6938113d4d3bef6a3a30cf82
  $fToFieldHandScore ::
    Data.Csv.Conversion.ToField Hearts.Types.HandScore
  DFunId
  {- Arity: 1, Strictness: <L,1*U(A,1*U(U))>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Logs.$fToFieldHandScore_$ctoField
                  `cast`
                (Sym (Data.Csv.Conversion.N:ToField[0]
                          <Hearts.Types.HandScore>_N)) -}
cb3d70af9da99c2897c94ee0efc4d794
  $fToFieldHandScore_$ctoField ::
    Hearts.Types.HandScore -> Data.Csv.Types.Field
  {- Arity: 1, Strictness: <L,1*U(A,1*U(U))>,
     Unfolding: (\ (x :: Hearts.Types.HandScore) ->
                 let {
                   cs :: Data.ByteString.Lazy.Internal.ByteString
                   = Data.ByteString.Builder.toLazyByteString
                       (case x of wild { Hearts.Types.HandScore ds1 ds4 ->
                        case ds4 of ww { GHC.Types.I# ww1 ->
                        Data.Csv.Conversion.Internal.$w$sformatBoundedSigned4 ww1 } })
                 } in
                 Data.ByteString.Lazy.toStrict_goLen0 cs cs) -}
51aea002d7c53f1c326a5412b5ca32c1
  $fToFieldSuit :: Data.Csv.Conversion.ToField Cards.Suit
  DFunId
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Logs.$fToFieldSuit_$ctoField
                  `cast`
                (Sym (Data.Csv.Conversion.N:ToField[0] <Cards.Suit>_N)) -}
cbc810023b2dda4327836ddcaf9819d9
  $fToFieldSuit1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# Cards.$fShowCard3) -}
72c38a06c9f6bfea140a019477c042a8
  $fToFieldSuit2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# Cards.$fShowCard5) -}
5c179e41a47b95922a4ae759c88375c2
  $fToFieldSuit3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# Cards.$fShowCard7) -}
3ff3d1da9cd9f8d33409b393098255f4
  $fToFieldSuit4 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# Cards.$fShowCard9) -}
ceef7355ed463d816da284580364405f
  $fToFieldSuit_$ctoField :: Cards.Suit -> Data.Csv.Types.Field
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Cards.Suit) ->
                 case x of wild {
                   Cards.Spade
                   -> case Logs.$fToFieldSuit4 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                      Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }
                   Cards.Club
                   -> case Logs.$fToFieldSuit3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                      Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }
                   Cards.Diamond
                   -> case Logs.$fToFieldSuit2 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                      Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }
                   Cards.Heart
                   -> case Logs.$fToFieldSuit1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                      Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 } }) -}
7331a75b0f02c181081b24df6dcec47a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Logs.$trModule3 Logs.$trModule1) -}
1b738bd561646d49f9f0b554ef0f470e
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Logs.$trModule2) -}
7ca6ef76c7a3e550a5b91fe6d23afad8
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Logs"#) -}
309f62d24d285c9939f58ace52605853
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Logs.$trModule4) -}
e7ed49cea5fc1aa4a3d8fbfaccda1547
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("hearts-0.1.0.0-HFI8OJwlE7V2tI6leOF0kf"#) -}
55e66872098f8af0be89a84658a2fc9d
  $wclearLog ::
    Hearts.Types.PlayerId
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U><S,U>, Inline: [2],
     Unfolding: (\ (ww :: Hearts.Types.PlayerId)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   player_dir :: GHC.IO.FilePath
                   = System.FilePath.Windows.combine Logs.log_dir ww
                 } in
                 case GHC.Prim.catch#
                        @ GHC.Types.Bool
                        @ GHC.Exception.Type.SomeException
                        (System.Directory.doesDirectoryExist3 player_dir)
                        System.Directory.doesDirectoryExist2
                        w of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   GHC.Types.False -> (# ipv, GHC.Tuple.() #)
                   GHC.Types.True
                   -> System.Directory.removeDirectoryRecursive1
                        player_dir
                        ipv } }) -}
43233bad361179681bd7f5604081f470
  $wwriteGame ::
    [Hearts.Types.HandResult]
    -> [Hearts.Types.Player]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <S,1*U><L,U><S,U>, Inline: [2] -}
317226f5c4b82ae2424cdde59a41bf8e
  clearAllLogs :: [Hearts.Types.Player] -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Logs.clearAllLogs1
                  `cast`
                (<[Hearts.Types.Player]>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
c4983d192a4deeb98f12a337b41522a1
  clearAllLogs1 ::
    [Hearts.Types.Player]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (players :: [Hearts.Types.Player])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Logs.clearAllLogs2 players eta) -}
9b6a8967e8f1b8a3da0cdcd4fa903091
  clearAllLogs2 ::
    [Hearts.Types.Player]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
40238d0b78725a3a85c0c40609c30057
  clearLog :: Hearts.Types.Player -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S,1*U(U,A,A,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Logs.clearLog1
                  `cast`
                (<Hearts.Types.Player>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9181b1a74fa13fc3037ce8facf7e1550
  clearLog1 ::
    Hearts.Types.Player
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U(U,A,A,A)><S,U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Hearts.Types.Player)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Hearts.Types.Player ww1 ww2 ww3 ww4 ->
                 Logs.$wclearLog ww1 w1 }) -}
1ef2507072eab3b2c14dc82532b39439
  clearLog2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("logs/"#) -}
7ce31b0efd468f9ea5604ff7c970deed
  log_dir :: GHC.IO.FilePath
  {- Unfolding: (GHC.CString.unpackCString# Logs.clearLog2) -}
3fa74476894a7d10db5851551825d68f
  writeGame :: Hearts.Types.GameResult -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(SLL),1*U(1*U,A,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Logs.writeGame1
                  `cast`
                (<Hearts.Types.GameResult>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
c46b74a5cd643996450a2444e9a5b1fd
  writeGame1 ::
    Hearts.Types.GameResult
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(SLL),1*U(1*U,A,U)><S,U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Hearts.Types.GameResult)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Hearts.Types.GameResult ww1 ww2 ww3 ->
                 Logs.$wwriteGame ww1 ww3 w1 }) -}
instance [orphan] Data.Csv.Conversion.ToField [Hearts.Types.HandScore]
  = Logs.$fToFieldHandScore
instance [orphan] Data.Csv.Conversion.ToField [Cards.Suit]
  = Logs.$fToFieldSuit
trusted: trustworthy
require own pkg trusted: True
module header:
  Nothing
declaration docs:
arg docs:

