
==================== FINAL INTERFACE ====================
2019-10-09 16:31:22.6615149 UTC

interface main:DumbPlayer 8064
  interface hash: dce8df42b271d52e8b4fc0c84e9ada88
  ABI hash: c1a6aa5e7140eefac7739bd36644f273
  export-list hash: 37eb21d28cbad781edea4b8af6f3c01c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 4da77a652a2901037dcf5738d0731897
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  DumbPlayer.makeBid
  DumbPlayer.playCard
module dependencies: MemoryParser
package dependencies: array-0.5.3.0 base-4.12.0.0* deepseq-1.4.4.0
                      ghc-prim-0.5.3 hearts-0.1.0.0* integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import safe base-4.12.0.0:Data.Foldable 6673f41a7644ecd4dda455d741d47ef8
import safe base-4.12.0.0:Data.List ccb3c44b4e7df281b8508bfc1f389d8d
import safe base-4.12.0.0:Data.Maybe 385d0eb722c0cb2347caf44c1967afe7
import safe base-4.12.0.0:Data.Tuple ddbd97abaf9b62e84e82a5bae338d270
import safe base-4.12.0.0:GHC.Base 954f4c258d193fab7048a63bfeb56dcf
import safe base-4.12.0.0:GHC.Err 3a680f55541fe399f95f794018fc3593
import safe base-4.12.0.0:GHC.List 63f1dc438c14c2ecfce50219fbb7ff35
import safe base-4.12.0.0:Prelude aea9afd24db8aed3563d7d850ea453c0
import safe ghc-prim-0.5.3:GHC.Classes 6002495dc43e58d28c87e5e5e058752a
import safe hearts-0.1.0.0:Cards d697d07d040dcb0fea10f2214ac7155e
import safe hearts-0.1.0.0:Hearts.Types a3e1c55fd9fb4edfd15f0d68a5a3797b
import safe MemoryParser 02de4c2e16b9a1ae01bccf13d8f6ca62
  exports: 1cda5827c0bffd1f6fd166b48c88bae4
  getBrokenHeart d73a3b350f75519aa1fb7027f39b81d7
  getUsedCards 911c1790fee78b76e6a5fe74cc9a834d
  updateUsedCards 923c337e070c492546fbd12909792ead
c92d3135da7ebe833e91db05d8d3d3b8
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   DumbPlayer.$trModule3
                   DumbPlayer.$trModule1) -}
4dde192d39b225db8410005f6c31104a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS DumbPlayer.$trModule2) -}
4f1c1ce66351a5325a295c62ac058a55
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DumbPlayer"#) -}
b677da821db95f449546dad0b3a9eceb
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS DumbPlayer.$trModule4) -}
f96054f3282d3c01d391c6d785634d6c
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
e79f06678487bd439e5b1901c299b612
  $wplayCard ::
    [Cards.Card]
    -> [(Cards.Card, Hearts.Types.PlayerId)]
    -> GHC.Maybe.Maybe
         ([(Cards.Card, Hearts.Types.PlayerId)], GHC.Base.String)
    -> (# Cards.Card, GHC.Base.String #)
  {- Arity: 3, Strictness: <L,U><S,U><S,U>, Inline: [2] -}
4a59896d386be21704998b06b5eaee35
  makeBid :: Hearts.Types.BidFunc
  {- Strictness: x -}
85523e00f39a056a4e28e5a5c1906fb5
  playCard :: Hearts.Types.PlayFunc
  {- Arity: 4, Strictness: <L,A><L,U><S,U><S,U>m, Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Hearts.Types.PlayerId)
                   (w1 :: [Cards.Card])
                   (w2 :: [(Cards.Card, Hearts.Types.PlayerId)])
                   (w3 :: GHC.Maybe.Maybe
                            ([(Cards.Card, Hearts.Types.PlayerId)], GHC.Base.String)) ->
                 case DumbPlayer.$wplayCard w1 w2 w3 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

