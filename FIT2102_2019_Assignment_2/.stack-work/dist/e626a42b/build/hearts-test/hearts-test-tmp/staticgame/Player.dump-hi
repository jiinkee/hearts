
==================== FINAL INTERFACE ====================
2019-10-25 08:55:09.7139806 UTC

interface main:Player 8064
  interface hash: 4b7c81c9e8eb87c39adb02a3e19b5018
  ABI hash: ca4437e0ab4a4c11e7ba3c6c221cff31
  export-list hash: e35f4f65a461b519906057031e750968
  orphan hash: 39770dc9b0aae5c068d569b519ae57b4
  flag hash: 4da77a652a2901037dcf5738d0731897
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Player.makeBid
  Player.playCard
module dependencies:
package dependencies: array-0.5.3.0 base-4.12.0.0* deepseq-1.4.4.0
                      ghc-prim-0.5.3 hearts-0.1.0.0* integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import safe base-4.12.0.0:Control.Applicative 37ad1ecb7adc211899b18378548196ee
import safe base-4.12.0.0:Data.Foldable 6673f41a7644ecd4dda455d741d47ef8
import safe base-4.12.0.0:Data.Functor 7be8e53dff1d6c612350c8ff6725f331
import safe base-4.12.0.0:Data.List ccb3c44b4e7df281b8508bfc1f389d8d
import safe base-4.12.0.0:Data.Maybe 385d0eb722c0cb2347caf44c1967afe7
import safe base-4.12.0.0:Data.OldList cd51cf46346202f55e4ecde7f0f7b58e
import safe base-4.12.0.0:Data.Tuple ddbd97abaf9b62e84e82a5bae338d270
import safe base-4.12.0.0:GHC.Base 954f4c258d193fab7048a63bfeb56dcf
import safe base-4.12.0.0:GHC.Err 3a680f55541fe399f95f794018fc3593
import safe base-4.12.0.0:GHC.List 63f1dc438c14c2ecfce50219fbb7ff35
import safe base-4.12.0.0:GHC.Num 009f4fca9200daff9e3ffbe2d7676a2f
import safe base-4.12.0.0:Prelude aea9afd24db8aed3563d7d850ea453c0
import safe ghc-prim-0.5.3:GHC.Classes 6002495dc43e58d28c87e5e5e058752a
import safe hearts-0.1.0.0:Cards d697d07d040dcb0fea10f2214ac7155e
import safe hearts-0.1.0.0:Hearts.Types a3e1c55fd9fb4edfd15f0d68a5a3797b
ac6e083ee56f003934c925c9a6153686
  $smaximum :: [Cards.Card] -> Cards.Card
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [Cards.Card]) ->
                 case w of wild {
                   [] -> Player.$smaximum1
                   : ipv ipv1
                   -> case ipv of ww { Cards.Card ww1 ww2 ->
                      case Player.$wgo ipv1 ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                      Cards.Card ww4 ww5 } } }) -}
8c5c7c12c9d88bc1cf3afa664ef725d7
  $smaximum1 :: Cards.Card
  {- Strictness: x -}
7470877e21bf8abb0122309740337b65
  $smaximum3 :: Cards.Rank
  {- Strictness: x -}
38199d30f8330e1ce20a30e132ffebc2
  $sminimum :: [Cards.Card] -> Cards.Card
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [Cards.Card]) ->
                 case w of wild {
                   [] -> Player.$sminimum1
                   : ipv ipv1
                   -> case ipv of ww { Cards.Card ww1 ww2 ->
                      case Player.$wgo1 ipv1 ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                      Cards.Card ww4 ww5 } } }) -}
b38f76f791263b4aba3720fc7277f950
  $sminimum1 :: Cards.Card
  {- Strictness: x -}
9492f444dcd085375203cd22886555f9
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Player.$trModule3
                   Player.$trModule1) -}
966aa5eecf91b76f7bea772e1a23c4fd
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Player.$trModule2) -}
aa6804c31d886bfd847635a51267a025
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Player"#) -}
79628064c465f65d63b65e3890acf2df
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Player.$trModule4) -}
cdda4786171962a378bb9c8e7a81feef
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
c954b49e6c4c7b1eed447862722e69aa
  $wgo ::
    [Cards.Card]
    -> Cards.Suit -> Cards.Rank -> (# Cards.Suit, Cards.Rank #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U>,
     Inline: [2] -}
f21c485048cd9f5d7d97db6404080b69
  $wgo1 ::
    [Cards.Card]
    -> Cards.Suit -> Cards.Rank -> (# Cards.Suit, Cards.Rank #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U>,
     Inline: [2] -}
14e567d005eeb8eb15d1098fb788e335
  $wplayCard ::
    [Cards.Card]
    -> [(Cards.Card, Hearts.Types.PlayerId)]
    -> GHC.Maybe.Maybe
         ([(Cards.Card, Hearts.Types.PlayerId)], GHC.Base.String)
    -> (# Cards.Card, GHC.Base.String #)
  {- Arity: 3, Strictness: <L,U><S,U><S,U>, Inline: [2] -}
be1f0c76ae922300747d340dd213cf93
  makeBid :: Hearts.Types.BidFunc
  {- Strictness: x -}
85073993829fba80fdb4e25df485ee5e
  playCard :: Hearts.Types.PlayFunc
  {- Arity: 4, Strictness: <L,A><L,U><S,U><S,U>m, Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Hearts.Types.PlayerId)
                   (w1 :: [Cards.Card])
                   (w2 :: [(Cards.Card, Hearts.Types.PlayerId)])
                   (w3 :: GHC.Maybe.Maybe
                            ([(Cards.Card, Hearts.Types.PlayerId)], GHC.Base.String)) ->
                 case Player.$wplayCard w1 w2 w3 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
"SPEC/Player maximum @ Card" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                         Cards.Card)
  GHC.List.maximum @ Cards.Card $dOrd = Player.$smaximum
"SPEC/Player minimum @ Card" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                         Cards.Card)
  GHC.List.minimum @ Cards.Card $dOrd = Player.$sminimum
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

